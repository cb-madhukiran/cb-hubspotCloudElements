{
    "id": 31500,
    "name": "HubSpotUnlink",
    "userId": 36293,
    "accountId": 29640,
    "createdDate": "2019-11-18T06:16:31Z",
    "steps": [
      {
        "id": 248773,
        "onSuccess": [
          "deleteThirdPartyElementInstance"
        ],
        "onFailure": [
          "updateParams"
        ],
        "name": "allFormulaInstancesDeleted",
        "type": "filter",
        "properties": {
          "body": "done(false);\nif(steps.updateErrorLog_2 !== undefined){\n  if(steps.updateErrorLog_2.errorLog.length === 0){\n    done(true);\n  }else{\n    done(false);  \n  }\n}\n\ndone(true);"
        }
      },
      {
        "id": 248774,
        "onSuccess": [
          "ConfigParams"
        ],
        "onFailure": [],
        "name": "ChargebeeConfigParams",
        "type": "httpRequest",
        "properties": {
          "method": "GET",
          "query": "${steps.InputParams.input.config.query}",
          "headers": "${steps.InputParams.input.config.auth}",
          "url": "${steps.InputParams.input.config.url}"
        }
      },
      {
        "id": 248775,
        "onSuccess": [
          "loopOverFormulaConfigurations"
        ],
        "onFailure": [],
        "name": "ConfigParams",
        "type": "script",
        "properties": {
          "body": "let config_param = {\n  configJSON :steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json\n};\n\nconfig_param.deleteArray = [];\nlet formulas = config_param.configJSON.cloudElements;\nif(formulas !== undefined) {\n  formulas = formulas.formulas;\n}\n\nif(formulas !== undefined) {\n  config_param.deleteArray.push({\n    id:formulas.formula_FullSync.id,\n    instance:formulas.formula_FullSync.instance\n});\n\nconfig_param.deleteArray.push({\n    id:formulas.formula_InitialSync.id,\n    instance:formulas.formula_InitialSync.instance\n});\n\nconfig_param.deleteArray.push({\n    id:formulas.formula_Validate.id,\n    instance:formulas.formula_Validate.instance\n});\n}\n\n\ndone(config_param);\n"
        }
      },
      {
        "id": 248776,
        "onSuccess": [
          "DeleteFormulaInstance"
        ],
        "onFailure": [],
        "name": "deleteConfig",
        "type": "script",
        "properties": {
          "body": "let formulaId = steps.loopOverFormulaConfigurations.entry.id;\nlet instanceId = steps.loopOverFormulaConfigurations.entry.instance;\n\nlet params = {\n  formula: formulaId,\n  instance: instanceId\n}\n\ndone(params)"
        }
      },
      {
        "id": 248777,
        "onSuccess": [
          "isDeleteFormulaSuccess"
        ],
        "onFailure": [
          "isDeleteFormulaSuccess"
        ],
        "name": "DeleteFormulaInstance",
        "type": "request",
        "properties": {
          "retryAttempts": "5",
          "method": "DELETE",
          "retryDelay": "200",
          "api": "/formulas/${steps.deleteConfig.formula}/instances/${steps.deleteConfig.instance}"
        }
      },
      {
        "id": 248778,
        "onSuccess": [
          "isDeleteThirdPartyInstanceSuccess"
        ],
        "onFailure": [
          "isDeleteThirdPartyInstanceSuccess"
        ],
        "name": "deleteThirdPartyElementInstance",
        "type": "request",
        "properties": {
          "retryAttempts": "5",
          "method": "DELETE",
          "retryDelay": "200",
          "api": "/instances/${steps.ConfigParams.configJSON.cloudElements.thirdParty.instance}"
        }
      },
      {
        "id": 248779,
        "onSuccess": [
          "deleteConfig"
        ],
        "onFailure": [
          "loopOverFormulaConfigurations"
        ],
        "name": "hasFormulaID",
        "type": "filter",
        "properties": {
          "body": "if(steps.loopOverFormulaConfigurations.entry.id !== undefined){\n  done(true);\n}\ndone(false);"
        }
      },
      {
        "id": 258059,
        "onSuccess": [
          "ChargebeeConfigParams"
        ],
        "onFailure": [
          "UnlinkError"
        ],
        "name": "HasLastSyncDetails",
        "type": "filter",
        "properties": {
          "body": "if(steps.LastSyncDetails.cb_status===\"success\") {\n  if(steps.LastSyncDetails.data!== undefined && (steps.LastSyncDetails.data.status ===\"running\" || steps.LastSyncDetails.data.status ===\"started\")) {\n     done(false);\n  }else{\n    done(true);\n  }\n}else {\n  done(false);\n}"
        }
      },
      {
        "id": 248780,
        "onSuccess": [
          "LastSyncDetails"
        ],
        "onFailure": [],
        "name": "InputParams",
        "type": "script",
        "properties": {
          "body": "let apiKey = trigger.args.request.query['cb-api-key'];\nlet siteName = trigger.args.request.query['cb-site-name'];\nlet type = trigger.args.request.query['type'];\nlet siteDomain = trigger.args.request.query['cb-domain'];\nlet password = \"\";\n let headers = {\n            Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password),\n            api_key : apiKey\n        };\nlet params = {\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    config :{\n      url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n      auth:{\n        Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query:{\n        integration_name: type\n      }\n     \n    }\n  },\n  lastsync:{\n      \n      \n     \n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/third_party_sync_details/tpmeta?integration_name=hubspot\",\n        headers: headers,\n        \n        apiKey: apiKey,\n        siteName: siteName,\n        siteDomain: siteDomain,\n        type: type,\n    }\n};\n\n\ndone(params);"
        }
      },
      {
        "id": 248781,
        "onSuccess": [
          "updateSuccessLog_2"
        ],
        "onFailure": [
          "updateErrorLog_2"
        ],
        "name": "isDeleteFormulaSuccess",
        "type": "filter",
        "properties": {
          "body": "if(steps.DeleteFormulaInstance.response.code !== 200){\n  done(false)\n}\n\ndone(true)"
        }
      },
      {
        "id": 248782,
        "onSuccess": [
          "updateSuccessLog_1"
        ],
        "onFailure": [
          "updateErrorLog_1"
        ],
        "name": "isDeleteThirdPartyInstanceSuccess",
        "type": "filter",
        "properties": {
          "body": "if(steps.deleteThirdPartyElementInstance.response.code !== 200){\n  done(false);\n}\ndone(true);"
        }
      },
      {
        "id": 258058,
        "onSuccess": [
          "HasLastSyncDetails"
        ],
        "onFailure": [],
        "name": "LastSyncDetails",
        "type": "formula",
        "properties": {
          "formulaId": "31330",
          "args": "${steps.InputParams.lastsync}"
        }
      },
      {
        "id": 248783,
        "onSuccess": [
          "hasFormulaID"
        ],
        "onFailure": [
          "allFormulaInstancesDeleted"
        ],
        "name": "loopOverFormulaConfigurations",
        "type": "loop",
        "properties": {
          "list": "${steps.ConfigParams.deleteArray}"
        }
      },
      {
        "id": 248784,
        "onSuccess": [],
        "onFailure": [],
        "name": "success",
        "type": "script",
        "properties": {
          "body": "let resultJS = {};\n\nresultJS.message = \"Integration Unlinked Successfully.\"\n\nlet errorLog1 = steps.updateErrorLog_1 ? steps.updateErrorLog_1.errorLog : [];\nlet errorLog2 = steps.updateErrorLog_2 ? steps.updateErrorLog_2.errorLog : [];\n\nlet successLog1 = steps.updateSuccessLog_1 ? steps.updateSuccessLog_1.successLog : [];\nlet successLog2 = steps.updateSuccessLog_2 ? steps.updateSuccessLog_2.successLog : [];\n\nlet errorLog = errorLog1.concat(errorLog2);\nlet successLog = successLog1.concat(successLog2);\n\nresultJS.successLog = (successLog.length > 0) ? successLog : [];\n\n// if(steps.updateConfigJSON.response !== undefined){\n//   if(steps.updateConfigJSON.response.code !== 200){\n//     errorLog.push(\"Unlinking Integration Failed : Failed to update Config JSON in Chargebee Third Party Configurations\");\n//   }\n// }\n\n// if(errorLog.length > 0){\n//   resultJS.message = \"Unlinking Integration Failed : Failed to Delete The Following Instances\";\n//   resultJS.errorLog = errorLog;\n// }\n\ndone({statusCode : 200});"
        }
      },
      {
        "id": 258060,
        "onSuccess": [],
        "onFailure": [],
        "name": "UnlinkError",
        "type": "script",
        "properties": {
          "body": "let card = {\n \"notice\" : \"Cannot Unlink, sync in progress\"\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});"
        }
      },
      {
        "id": 248785,
        "onSuccess": [
          "success"
        ],
        "onFailure": [],
        "name": "updateConfigJSON",
        "type": "httpRequest",
        "properties": {
          "retryAttempts": "5",
          "method": "POST",
          "query": "${steps.updateParams.update}",
          "retryDelay": "200",
          "headers": "${steps.InputParams.input.config.auth}",
          "url": "${steps.InputParams.input.config.url}"
        }
      },
      {
        "id": 248786,
        "onSuccess": [
          "updateParams"
        ],
        "onFailure": [],
        "name": "updateErrorLog_1",
        "type": "script",
        "properties": {
          "body": "let errorLog = [];\n\n\nif(steps.updateErrorLog_1 !== undefined){\n  errorLog = steps.updateErrorLog_1.errorLog;\n}\n\nerrorLog.push(\"Failed to Delete The Third Party Instance with ID: \"+ steps.ConfigParams.configJSON.cloudElements.thirdParty.instance + \"\\n\")\n\n\ndone({errorLog: errorLog});"
        }
      },
      {
        "id": 248787,
        "onSuccess": [
          "loopOverFormulaConfigurations"
        ],
        "onFailure": [],
        "name": "updateErrorLog_2",
        "type": "script",
        "properties": {
          "body": "let errorLog = [];\n\nif(steps.updateErrorLog_2 !== undefined){\n  errorLog = steps.updateErrorLog_2.errorLog;\n}\n\nerrorLog.push(\"\\nFailed to Delete The Formula Instance\\n Formula ID: \"+ steps.deleteConfig.formula + \"\\nInstance ID: \" + steps.deleteConfig.instance + \"\\n\");\n\ndone({errorLog:errorLog});\n"
        }
      },
      {
        "id": 248788,
        "onSuccess": [
          "success"
        ],
        "onFailure": [],
        "name": "updateParams",
        "type": "script",
        "properties": {
          "body": "let errorLog1 = steps.updateErrorLog_1 ? steps.updateErrorLog_1.errorLog : [];\nlet errorLog2 = steps.updateErrorLog_2 ? steps.updateErrorLog_2.errorLog : [];\n\nlet successLog1 = steps.updateSuccessLog_1 ? steps.updateSuccessLog_1.successLog : [];\nlet successLog2 = steps.updateSuccessLog_2 ? steps.updateSuccessLog_2.successLog : [];\n\nlet errorLog = errorLog1.concat(errorLog2);\nlet successLog = successLog1.concat(successLog2);\n\n\nlet configJson = {\n  cloudElements: {\n    success : successLog,\n    failed : errorLog,\n    chargebee : steps.ConfigParams.configJSON.cloudElements.chargebee\n  }\n}\n\nlet configParam = {\"new_sub_step\": \"\"};\n\n\nlet input = {\n  update: {\n    integration_name: trigger.args.request.query.type,\n    \"config_json\": \"{}\"\n  }\n};\n\n\ndone(input);"
        }
      },
      {
        "id": 248789,
        "onSuccess": [
          "updateParams"
        ],
        "onFailure": [],
        "name": "updateSuccessLog_1",
        "type": "script",
        "properties": {
          "body": "let successLog = [];\n\n\nif(steps.updateSuccessLog_1 !== undefined){\n  successLog = steps.updateSuccessLog_1.successLog;\n}\n\nsuccessLog.push(\"Successfully deleted the Third Party Instance with ID: \"+ steps.ConfigParams.configJSON.cloudElements.thirdParty.instance + \"\\n\")\n\n\ndone({successLog: successLog});"
        }
      },
      {
        "id": 248790,
        "onSuccess": [
          "loopOverFormulaConfigurations"
        ],
        "onFailure": [],
        "name": "updateSuccessLog_2",
        "type": "script",
        "properties": {
          "body": "let successLog = [];\n\nif(steps.updateSuccessLog_2 !== undefined){\n  successLog = steps.updateSuccessLog_2.successLog;\n}\n\nsuccessLog.push(\"\\nSuccessfully deleted the Formula Instance\\n Formula ID: \"+ steps.deleteConfig.formula + \"\\nInstance ID: \" + steps.deleteConfig.instance + \"\\n\");\n\ndone({successLog:successLog});\n"
        }
      }
    ],
    "triggers": [
      {
        "id": 27957,
        "onSuccess": [
          "InputParams"
        ],
        "onFailure": [],
        "type": "manual",
        "async": true,
        "name": "trigger",
        "properties": {}
      }
    ],
    "subFormulas": [
      {
        "id": 31330,
        "name": "ChargebeeGet",
        "userId": 36293,
        "accountId": 29640,
        "createdDate": "2019-11-13T14:36:04Z",
        "steps": [
          {
            "id": 247686,
            "onSuccess": [
              "ChargebeeGetCBDelay2"
            ],
            "onFailure": [
              "ChargebeeGetResult"
            ],
            "name": "ChargebeeGetCallAgainCB",
            "type": "filter",
            "properties": {
              "body": "let code = \"\";\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
            }
          },
          {
            "id": 247687,
            "onSuccess": [
              "ChargebeeGetCBDelay"
            ],
            "onFailure": [
              "ChargebeeGetResult2"
            ],
            "name": "ChargebeeGetCallAgainHttp",
            "type": "filter",
            "properties": {
              "body": "if(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetHttpData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
            }
          },
          {
            "id": 247688,
            "onSuccess": [
              "ChargebeeGetGetHttpData"
            ],
            "onFailure": [],
            "name": "ChargebeeGetCBDelay",
            "type": "httpRequest",
            "properties": {
              "retryAttempts": "5",
              "method": "GET",
              "query": "${steps.ChargebeeGetInputParams.delay.query}",
              "retryDelay": "500",
              "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
              "url": "${steps.ChargebeeGetInputParams.delay.url}",
              "retry": "true",
              "retryStatusCodes": "500-599,429"
            }
          },
          {
            "id": 247689,
            "onSuccess": [
              "ChargebeeGetGetCBData"
            ],
            "onFailure": [],
            "name": "ChargebeeGetCBDelay2",
            "type": "httpRequest",
            "properties": {
              "retryAttempts": "5",
              "query": "${steps.ChargebeeGetInputParams.delay.query}",
              "method": "GET",
              "retryDelay": "500",
              "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
              "url": "${steps.ChargebeeGetInputParams.delay.url}",
              "retry": "true",
              "retryStatusCodes": "500-599,429"
            }
          },
          {
            "id": 247690,
            "onSuccess": [],
            "onFailure": [],
            "name": "ChargebeeGetError",
            "type": "script",
            "properties": {
              "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"
            }
          },
          {
            "id": 247691,
            "onSuccess": [
              "ChargebeeGetCallAgainCB"
            ],
            "onFailure": [
              "ChargebeeGetCallAgainCB"
            ],
            "name": "ChargebeeGetGetCBData",
            "type": "elementRequest",
            "properties": {
              "retryAttempts": "5",
              "body": "${steps.ChargebeeGetInputParams.bodydata}",
              "elementInstanceId": "${config.chargebee}",
              "query": "${steps.ChargebeeGetInputParams.query}",
              "method": "GET",
              "retryDelay": "500",
              "acceptableStatusCodes": "200-600",
              "headers": "",
              "retry": "true",
              "retryStatusCodes": "500-599,429",
              "api": "${steps.ChargebeeGetInputParams.url}"
            }
          },
          {
            "id": 247692,
            "onSuccess": [
              "ChargebeeGetCallAgainHttp"
            ],
            "onFailure": [
              "ChargebeeGetCallAgainHttp"
            ],
            "name": "ChargebeeGetGetHttpData",
            "type": "httpRequest",
            "properties": {
              "body": "${steps.ChargebeeGetInputParams.bodydata}",
              "query": "${steps.ChargebeeGetInputParams.query}",
              "method": "GET",
              "acceptableStatusCodes": "200-600",
              "headers": "${steps.ChargebeeGetInputParams.headers}",
              "url": "${steps.ChargebeeGetInputParams.url}"
            }
          },
          {
            "id": 247693,
            "onSuccess": [
              "ChargebeeGetIsValidUrl"
            ],
            "onFailure": [],
            "name": "ChargebeeGetInputParams",
            "type": "script",
            "properties": {
              "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\nlet bodydata = trigger.args.bodydata;\nif (bodydata === undefined)\n{\n  bodydata = {};\n}\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    bodydata: bodydata,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
            }
          },
          {
            "id": 247694,
            "onSuccess": [
              "ChargebeeGetGetHttpData"
            ],
            "onFailure": [
              "ChargebeeGetGetCBData"
            ],
            "name": "ChargebeeGetIsHttp",
            "type": "filter",
            "properties": {
              "body": "done(steps.ChargebeeGetInputParams.url.startsWith(\"https://\"));"
            }
          },
          {
            "id": 247695,
            "onSuccess": [
              "ChargebeeGetIsHttp"
            ],
            "onFailure": [
              "ChargebeeGetError"
            ],
            "name": "ChargebeeGetIsValidUrl",
            "type": "filter",
            "properties": {
              "body": "done(steps.ChargebeeGetInputParams.url !== undefined && steps.ChargebeeGetInputParams.url!== \"\");"
            }
          },
          {
            "id": 247696,
            "onSuccess": [],
            "onFailure": [],
            "name": "ChargebeeGetResult",
            "type": "script",
            "properties": {
              "body": "let code = 600;\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(code < 300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetCBData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[code] !== undefined;\n  if(steps.ChargebeeGetGetCBData!== undefined && steps.ChargebeeGetGetCBData.response!== undefined && steps.ChargebeeGetGetCBData.response.body!== undefined && steps.ChargebeeGetGetCBData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetCBData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    msg:steps.ChargebeeGetGetCBData.response,\n    cb_status_code:code\n  });\n}\n\n"
            }
          },
          {
            "id": 247697,
            "onSuccess": [],
            "onFailure": [],
            "name": "ChargebeeGetResult2",
            "type": "script",
            "properties": {
              "body": "if(steps.ChargebeeGetGetHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetHttpData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetHttpData.response.body!== undefined && steps.ChargebeeGetGetHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_status_code:steps.ChargebeeGetGetHttpData.response.code\n  });\n}\n\n"
            }
          }
        ],
        "triggers": [
          {
            "id": 27793,
            "onSuccess": [
              "ChargebeeGetInputParams"
            ],
            "onFailure": [],
            "type": "manual",
            "async": true,
            "name": "trigger",
            "properties": {}
          }
        ],
        "engine": "v3",
        "active": true,
        "debugLoggingEnabled": false,
        "singleThreaded": false,
        "configuration": []
      }
    ],
    "method": "GET",
    "uri": "/unlink",
    "engine": "v1",
    "active": true,
    "debugLoggingEnabled": true,
    "singleThreaded": false,
    "api": "GET /unlink",
    "configuration": []
  }